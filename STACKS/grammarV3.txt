
program    ::=	{ process_definition }

process_definition ::= "PROCESS" INTEGER [INTEGER] nl {statement} nl "END" nl
                        # Example: PROCESS 1 64 (PID 1, stack size 64)
                        #          PROCESS 2    (PID 2, default stack size)

statement  ::=  "LABEL" ident nl
			|   "GOTO" ident nl
			|   INTEGER "TIMER" ("SET" | "PRINT" | "GET") nl
			|   "FUNCTION" ident nl {statement} nl "END" nl
			|   "ARRAY" ident INTEGER nl                # For non-shared, process-local arrays
			|   "SHARED" "VAR" ident nl                 # For shared variables in the heap
			|   "SHARED" "ARRAY" ident INTEGER nl       # For shared arrays in the heap

			|	ident CONNECTION READ readService nl
			|	ident CONNECTION WRITE INTEGER INTEGER nl

			|	INTEGER CHANNEL ON | OFF

			
			|   "{" (expression | st) "}" "DO" nl 		# While {expession} is true, DO-block is executed
					{statement} nl 
				"END" nl 

			# Process Management (YIELD is excluded as per request)
			|   expression "STARTPROCESS" nl
			|   expression "STOPPROCESS" nl

			|   (expression | st) 	( "PRINT" nl          
									| "PLOT" nl
									| "DRAW" nl
									| "WAIT"  nl           
									| "AS" (ident | '['ident']') nl 	# Assign to var or array element
									| "DO"   nl {statement} nl "END" nl # when TOS is 0 (true) do DO-block
									| "GOTO" ident nl					# when TOS is 0 (true) do GOTO
									|  nl ) 					# Expression can stand alone (values left on stack)



expression ::=	(INTEGER | STRING | "`" ident | ident | "MYPID" | '['ident']' | word )+ # Added MYPID
word       ::=	('+'|'-'|'*'|'/'|'%'|'=='|'!='|'>'|'<'|'GCD'|'!'|'DUP'|'SWAP'|'OVER'|'DROP'|'INPUT'|'RAWIN'|'SHOW'|'HASH')

# ident is a general identifier token. Its meaning (variable, function, label, array)
# is determined by the parser based on context.
ident      ::=  [a-z][a-z0-9]*

st         ::=	('.'|'..')
nl         ::= '\n'+


