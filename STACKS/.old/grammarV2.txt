
program    ::=	{statement}
statement  ::=  "LABEL" ident nl
			|   "GOTO" ident nl
			|   "TIMER" INTEGER ("SET" | "PRINT" | "GET") nl
			|   "FUNCTION" ident nl {statement} nl "END" nl
			|   "{" (expression | st) "}" "DO" nl {statement} nl "END" nl	   
			|   (expression | st) ( "PRINT" nl
								| "PLOT" nl
								| ¨WAIT¨ nl
								| "AS" ident nl
								| "DO"   nl {statement} nl "END" nl
								| "GOTO" ident nl
								|  nl )



expression ::=	(INTEGER | STRING | "`" ident | ident | word )+
word       ::=	('+'|'-'|'*'|'/'|'%'|'=='|'!='|'>'|'<'|'GCD'|'!'|'DUP'|'SWAP'|'OVER'|'DROP'|'INPUT'|'RAWIN'|'SHOW'|'HASH')
ident      ::=	(variable | function )

st         ::=	('.'|'..')
nl         ::= '\n'+


regenerate  the grammmer file
notes for version 3:

must be proces aware to write code for processes
so a program exits of one or more processes.
each proces has an PID and optional a stack-size

<program>
	<context id [stack-size]>
		<statements>
	<end>	# end of context

	<context id [stack-size]>
		<statements>
	<end>	# end of context

A YIELD instrucion is hard to impement on the CPU side, so do not implement for Now
use END instead of ENDPROCES