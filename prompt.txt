

Review the Stern-1 project, the new CPU supports multi processing capabilities and the new loader3.asm, kernel3.asm runs an multi processing kernel. Also the STACKS language is now multi processes compatible. Each proces has a memory block of 1024 wich includes (configurable) datastack at the top of the block, this area is also used for vars and arrays. The programcode starts at the beginning of the 1k block. The STACKS language is PROCESS aware and can be used as language to write programs running in those processes. see the processes.stacks example file. check STACKS/parseV3.py and STACKS/src/ example files for more details about the stacks-language. asm/include/stern_runtime.asm is the the runtime library and is included in the /kernel3.asm

i found 3x1024 unused memory and i like to introduce an memoryheap where PROCESSES can store and share vars and arrays
Herefore i like to build an static heap at top of the last process block (now its tunning 4 processes).
In STACKS a shared/heap allocation is done by SHARED VAR varname, or SHARED ARRAY myArray 16. When two PROCESSES define the same shared symbol, they share the symbol

when reading/writing to an shared adress, the kernel will check if the heap is locked (an other proces is using the heap), if not it locks the heap, and is doing the  read/write operation, after the operation is done, the kernel will release the lock

if the heap is locked when a process is requestion an read/write operation to the heap, the kernel changed the process status to WAIT_FOR_UNLOCK, and this proces will not be scheduled anymore. when the kernel unlocks the previous proces it checks if any proces is WAIT_FOR_UNLOCK, is  its finds one, it will set the proces stattus to READY, so it will be scheduled again.

the assembler is using the &-prefix for global symbols, so when in the STACKS language a SHARED symbol is defined, it will generate ". &myVar 1" instead of ". $myVar 1" (for unshared symbols). the assembler keeps track of the shared symbols globaly like the assembler does in 'kernel' mode for non-shared symbols. where the in process symbols are reset before an new .PROCESS starts, shared object must not be reset at that point. But the shared objects are reset when the restore flag of the assembler is true (so if you want to share symbols in PROCESSES, the processes must be defined in the same sourcefile)

While the kernel is resposible for the actually LOCK/UNLOCK and rescheduling, the stern_runtime must provide routines to hide the heavylifting from the assembler




The plan seems solid.

**Next Implementation Phase: Assembler Support for Shared Memory**

The immediate next step should be to update the assembler (`assembler1c.py`) to handle shared symbols and allocations. Key modifications:

1.  **Shared Symbol Table & Pointer:**
    *   Introduce `self.shared_symbols = {}` for `&symbol: address` mappings.
    *   Introduce `self.NextSharedAddressPointer`, initialized to the start of the shared heap (e.g., `SHARED_HEAP_START_ADDRESS`, which needs to be defined based on the memory map after the last process block).
2.  **Directive `.&`:**
    *   In `parse_symbols`, add logic for `.& symbolName size`.
    *   It should allocate `symbolName` (must start with `&`) in `self.shared_symbols` at `self.NextSharedAddressPointer` and increment the pointer by `size`.
    *   These symbols should persist across `.PROCES` blocks and only be reset by `restore_state()`.
3.  **Symbol Resolution:**
    *   Update `get_adres` to resolve `&symbols` from `self.shared_symbols`.
4.  **State Management:**
    *   Integrate `self.shared_symbols` and `self.NextSharedAddressPointer` into `save_state()` and `restore_state()`.
5.  **Initialization (`%`):**
    *   Ensure `% &mySharedVar 123` works by allowing `get_adres` to resolve `&mySharedVar` as the target for the `%` directive.

This will lay the groundwork for the STACKS compiler and runtime changes.
