The STERN-1 project is a custom virtual machine/emulator with its own assembly language and a higher-level language called STACKS. 
It features a multi-processing kernel (V3) managing processes with dedicated 1KB memory blocks for code, stack, and local variables. 
Emulated hardware includes a screen, keyboard, virtual disk, serial I/O, plotter, RTC, and network interface. 
The assembler supports standard instructions, directives, labels, and constants, distinguishing between local ($) and global/shared (&) symbols. 
The STACKS language, compiled to assembly, supports basic data types, operators, control flow, and runtime interactions with the emulated hardware, and is multi-process compatible
check the current state of networkNICrc.py, asm/incl/networkR3.asm, asm/incl/stern_runtime.asm, asm/incl/networkdispatcher.asm

i like to make the current networkstack, networkNICrc.py, asm/incl/networkR3.asm and asm/incl/stern_runtime.asm, asm/incl/networkdispatcher.asm multiprocessing aware.

the current situation the networkNICrc.py is taking care of reliable sending of the messages and when a message is received, the receive interrupt place the message in the circular networkbuffer.
the scheduled networkdispatcher reads the networkbuffer and start the correct network serivce, the echo service (service ID 1) will echo the message back to the sender. servie ID 0 is an general receiver service with place the message in 1 general buffer for the application (proces) to read.

oversee the current codebase, there are two options:
1) enhanche the low-level networkstack so the protocol know about the proces, or
2) the process ID of the receiver is encoded in the payload

i prefer option 2, but it must be done in a Stern/STACKS way of thinking

---

**Plan for Implementing Process-Aware Networking**

**1. Goal:**
Enable processes to send network messages directly to other processes, both on the same machine and on different machines, by embedding the target Process ID (PID) into the message payload. This keeps the low-level transport protocol generic while adding application-level routing.

**2. Protocol and Payload Convention:**
*   **Service ID:** Service ID `0` will be repurposed as the dedicated "Process Routing Service". All messages intended for a specific process will use this service ID.
*   **Payload Encoding:** The 16-bit data payload of a message sent with Service ID 0 will be encoded using a simple arithmetic scheme: `packed_value = (data_to_send * 10) + target_PID`.
*   **Payload Unpacking:** The receiving dispatcher will use the `dmod` instruction with a divisor of 10 to unpack the payload. The quotient will be the original data, and the remainder will be the target PID.
*   **Constraints:** This approach limits PIDs to the range 0-9, which is sufficient for the current STERN-1 kernel (4 user processes).

**3. `networkdispatcher.asm` Modifications:**
*   **Per-Process Inboxes:**
    *   The single global buffer for service 0 (`$SERVICE0_DATA_BUFFER`) will be replaced by a set of ring buffers, one for each user process.
    *   A memory block (`$PROC_INBOX_MEMORY_BLOCK`) will be allocated to hold all inboxes.
    *   Pointer tables (`$PROC_INBOX_ADDR_TABLE`, `$PROC_INBOX_WPTR_TABLE`, `$PROC_INBOX_RPTR_TABLE`) will be created to manage the base address and read/write pointers for each process's inbox, indexed by PID.
    *   An initialization routine, `@init_process_inboxes`, will be created for the kernel to call at startup to set up these tables.
*   **New Service Router (`@service_handler_router`):**
    *   The existing `@service_handler_0` will be replaced with `@service_handler_router`.
    *   This new handler will be responsible for:
        1.  Unpacking the target PID and data from the received payload.
        2.  Validating the PID.
        3.  Looking up the correct inbox for the target PID using the pointer tables.
        4.  Writing the message (`source_address`, `data`) into the process's ring buffer. It will handle buffer-full conditions by overwriting the oldest message.
*   **Service Jump Table Update:**
    *   The entry for Service ID 0 in `$SERVICE_JUMP_TABLE` will be updated to point to `@service_handler_router`.

**4. `stern_runtime.asm` Modifications (New APIs):**
*   **`@read_process_message`:**
    *   A new runtime routine for a process to read from its personal network inbox.
    *   It will use the calling process's PID (obtained via a kernel syscall) to find the correct inbox, read the next available message (`source_address`, `data`).
    *   It will push the `source_address`, `data`, and a status flag (0 for success, 1 for empty) onto the STACKS stack.
    *   On STACKS stack (top to bottom): `status`, `data`, `src_addr` (if success).
*   **`@stacks_process_write`:**
    *   A new runtime routine (or a template for the STACKS compiler) for sending a message to a specific process.
    *   It will take a destination NIC, destination PID, and data value as input.
    *   It will pack the PID and data according to the `(data * 10) + PID` convention.
    *   It will then call the existing `@send_data_packet_sub` with the appropriate arguments (destination NIC, packed data, service ID 0).

**5. Required Changes Summary:**
*   **`networkNICr2.py`:** No changes required. The NIC hardware emulation correctly treats the payload as an opaque value.
*   **`asm/incl/networkR3.asm`:** No changes required. The reliable transport layer (`@send_data_packet_sub`, ISR logic) remains the same.
*   **`asm/incl/networkdispatcher.asm`:** Major changes. Implement per-process inboxes and the new `@service_handler_router`.
*   **`asm/incl/stern_runtime.asm`:** Add new API routines `@read_process_message` and `@stacks_process_write`.
*   **`asm/kernel3.asm`:** A small change will be needed to call `@init_process_inboxes` during kernel initialization. A syscall to get the current PID (`~SYSCALL_GET_PID`) is also assumed to exist.
